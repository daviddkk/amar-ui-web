@use 'sass:string';
@use './variables' as vars;
@use './constants' as consts;
@use './functions' as funcs;
@use '@amar-web-ui/core/utilities' as utils;

// NEW
@mixin create-all-classes() {
  @each $type in consts.$spacing-types {
    @include create-standard-spacing-class($type);
    @include create-directional-spacing-classes($type);
  }
}

@mixin create-standard-spacing-class($type) {
  $capitalized-type: utils.capitalize($type);
  $selector: $capitalized-type;

  .#{$selector} {
    @include _apply-spacing-props($type);
    @include _append-size-classes($type);
  }
}

@mixin create-directional-spacing-classes($type) {
  $capitalized-type: utils.capitalize($type);
  $selector: $capitalized-type;

  @each $direction in consts.$spacing-directions {
    $capitalized-direction: utils.capitalize($direction);
    $selector: #{$capitalized-type}#{$capitalized-direction} !default;
    $selector: string.quote($selector);

    .#{$selector} {
      @include _apply-spacing-props($type, $direction);
      @include _append-size-classes($type, $direction);
    }
  }
}

@mixin _append-size-classes($type, $direction: false) {
  @each $spacing-size, $spacing-value in vars.$spacing-map {
    $selector: $spacing-size;

    &-#{$selector} {
      @include _apply-spacing-props($type, $direction, $size: $spacing-size);
    }
  }
}

@mixin _apply-spacing-props($type, $direction: false, $size: 'base') {
  $style-prop: funcs.get-spacing-property($type, $direction);
  #{$style-prop}: funcs.get-spacing($size);
}

// OLD

/**
 *
 * Variants:
 * - Standard version:
 * # .(Margin|Padding) -> Applies base padding or margin around an element.
 * # .(Margin|Padding):{value} -> Applies specific spacing size around an element.
 * # .(Margin|Padding)(Left|Top|Right|Bottom|X|Y) -> Applies base padding or margin on specific direction.
 * # .(Margin|Padding)(Left|Top|Right|Bottom|X|Y):{value} -> Applies specific padding/margin size on specific direction
 *
 * - Shorthand version:
 * # (mg|pd) -> Applies base padding/margin around an element.
 * # (mg|pd):{value} -> Applies specific padding/margin size around an element.
 * # (mg|pd)-(left|top|right|bottom|x|y) -> Applies base padding/margin size on specific direction.
 * # (mg|pd)-(left|top|right|bottom|x|y) -> Applies specific padding/margin size on specific direction.
 */

// @mixin tnk-create-spacing-classes($is-abbreviated) {
//   @each $spacing-type, $spacing-type-abbreviation in $tnk-spacing-type-map {
//     $spacing-type-capitalized: capitalize($spacing-type);

//     $spacing-type-stylerule: '' !default;
//     @if $is-abbreviated {
//       // creates either "mg" or "pd" stylerule;
//       $spacing-type-stylerule: $spacing-type-abbreviation;
//     } @else {
//       $spacing-type-stylerule: $spacing-type-capitalized;
//     }

//     // Generates .Margin/.mg and .Padding/.pd classes.
//     .#{$spacing-type-stylerule} {
//       #{$spacing-type}: tnk-spacing('base') !important;

//       // prettier-ignore
//       @include tnk-create-spacing-values($is-abbreviated, $spacing-type);
//       @include tnk-create-spacing-$spacing-directions($is-abbreviated, $spacing-type);
//     }
//   }
// }

// @mixin tnk-create-spacing-directions($is-abbreviated, $spacing-type) {
//   @each $spacing-direction in $tnk-spacing-direction-map {
//     $spacing-direction-lowercased: $spacing-direction;
//     $spacing-direction-capitalized: capitalize($spacing-direction);

//     $spacing-direction-stylerule: '' !default;
//     @if ($is-abbreviated) {
//       // e.g: "mg-left", "mg-top"
//       $spacing-direction-stylerule: '-#{$spacing-direction-lowercased}';
//     } @else {
//       // e.g: PaddingLeft, MarginTop
//       $spacing-direction-stylerule: $spacing-direction-capitalized;
//     }

//     // Generates .Margin(Left|Top|Right|Bottom) classes with base spacing value.
//     &#{$spacing-direction-stylerule} {
//       #{$spacing-type}-#{$spacing-direction}: tnk-spacing('base') !important;

//       // prettier-ignore
//       @include tnk-create-spacing-values($is-abbreviated, $spacing-type, $spacing-direction);
//     }
//   }
// }

// ///
// /// Generates size (from 2xsmall ~ 2xlarge) variant classes.
// ///
// /// @params
// /// - $spacing-type -> ("padding"|"margin")
// /// - $spacing-direction -> ("all"|"left"|"top"|"right"|'bottom')
// ///
// /// @variants:
// /// - .Margin(Left|Top|Right|Bottom)-({n}xsmall|xsmall|small|base|large|xlarge|{n}xlarge)
// ///
// /// @examples:
// /// - .MarginLeft-large
// /// - .Padding-large
// ///
// @mixin tnk-create-spacing-values($is-abbreviated, $spacing-type, $spacing-direction: 'all') {
//   @each $spacing-size, $spacing-value in $tnk-spacings {
//     &-#{$spacing-size} {
//       @if $spacing-direction == 'all' {
//         #{$spacing-type}: tnk-spacing($spacing-size) !important;
//       } @else if $spacing-direction == 'x' or $spacing-direction == 'y' {
//         @each $direction in map-get($tnk-spacing-axes, $spacing-direction) {
//           #{$spacing-type}-#{$direction}: tnk-spacing($spacing-size) !important;
//         }
//       } @else {
//         #{$spacing-type}-#{$spacing-direction}: tnk-spacing($spacing-size) !important;
//       }
//     }

//     &-m-#{$spacing-size} {
//       @if $spacing-direction == 'all' {
//         #{$spacing-type}: #{tnk-spacing($spacing-size) * -1} !important;
//       } @else if $spacing-direction == 'x' or $spacing-direction == 'y' {
//         @each $direction in map-get($tnk-spacing-axes, $spacing-direction) {
//           #{$spacing-type}-#{$direction}: #{tnk-spacing($spacing-size) * -1} !important;
//         }
//       } @else {
//         #{$spacing-type}-#{$spacing-direction}: #{tnk-spacing($spacing-size) * -1} !important;
//       }
//     }
//   }
// }
